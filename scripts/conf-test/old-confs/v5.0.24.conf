node {
  name = "emqx@127.0.0.1"
  cookie = "emqxsecretcookie"
  data_dir = "data"
}

log {
  file_handlers.default {
    level = warning
    file = "log/emqx.log"
  }
}

cluster {
  name = emqxcl
  discovery_strategy = manual
}

authentication = [
  {
    backend = "built_in_database"
    mechanism = "password_based"
    password_hash_algorithm {name = "sha256", salt_position = "suffix"}
    user_id_type = "username"
  }
]
authorization {
  cache {enable = true}
  deny_action = "ignore"
  no_match = "allow"
  sources = [
    {
      body {username = "${username}"}
      connect_timeout = "15s"
      enable_pipelining = 100
      headers {"content-type" = "application/json"}
      method = "post"
      pool_size = 8
      request_timeout = "30s"
      ssl {enable = false, verify = "verify_peer"}
      type = "http"
      url = "http://127.0.0.1:8080"
    },
    {
      enable = true
      path = "etc/acl.conf"
      type = "file"
    }
  ]
}
bridges {
  webhook {
    test {
      connect_timeout = "15s"
      enable_pipelining = 100
      headers {"content-type" = "application/json"}
      method = "post"
      pool_size = 8
      pool_type = "random"
      request_timeout = "15s"
      resource_opts {
        async_inflight_window = 100
        auto_restart_interval = "60s"
        health_check_interval = "15s"
        max_queue_bytes = "1GB"
        query_mode = "async"
        request_timeout = "15s"
        worker_pool_size = 4
      }
      ssl {enable = false, verify = "verify_peer"}
      url = "http://127.0.0.1:8080/webhook"
    }
  }
}
exhook {
  servers = [
    {
      auto_reconnect = "60s"
      enable = false
      failed_action = "deny"
      name = "test"
      pool_size = 16
      request_timeout = "5s"
      ssl {enable = false, verify = "verify_peer"}
      url = "http://127.0.0.1:8080"
    }
  ]
}
gateway {
  coap {
    connection_required = false
    enable_stats = true
    listeners {
      udp {
        default {
          bind = "5683"
          max_conn_rate = 1000
          max_connections = 1024000
        }
      }
    }
    mountpoint = ""
    notify_type = "qos"
    publish_qos = "coap"
    subscribe_qos = "coap"
  }
}
listeners {
  ssl {
    default {
      bind = "0.0.0.0:8883"
      max_connections = 512000
      ssl_options {
        cacertfile = "etc/certs/cacert.pem"
        certfile = "etc/certs/cert.pem"
        keyfile = "etc/certs/key.pem"
      }
    }
  }
  tcp {
    default {
      acceptors = 16
      bind = "0.0.0.0:1883"
      enable_authn = true
      enabled = true
      limiter {
        bytes {rate = "infinity"}
        client {
          bytes {rate = "infinity"}
          messages {rate = "infinity"}
        }
        messages {rate = "infinity"}
      }
      max_connections = 5000
      proxy_protocol = false
      proxy_protocol_timeout = "3s"
      tcp_options {
        active_n = 100
        backlog = 1024
        buffer = "4KB"
        high_watermark = "1MB"
        nodelay = true
        reuseaddr = true
        send_timeout = "15s"
        send_timeout_close = true
      }
      zone = "default"
    }
  }
  ws {
    default {
      bind = "0.0.0.0:8083"
      max_connections = 1024000
      websocket {mqtt_path = "/mqtt"}
    }
  }
  wss {
    default {
      bind = "0.0.0.0:8084"
      max_connections = 512000
      ssl_options {
        cacertfile = "etc/certs/cacert.pem"
        certfile = "etc/certs/cert.pem"
        keyfile = "etc/certs/key.pem"
      }
      websocket {mqtt_path = "/mqtt"}
    }
  }
}
log {
  console_handler {
    burst_limit {
      enable = true
      max_count = 10000
      window_time = "1s"
    }
    chars_limit = "unlimited"
    drop_mode_qlen = 3000
    enable = true
    flush_qlen = 8000
    formatter = "text"
    level = "warning"
    max_depth = 100
    overload_kill {
      enable = true
      mem_size = "30MB"
      qlen = "10000"
      restart_after = "5s"
    }
    single_line = true
    supervisor_reports = "error"
    sync_mode_qlen = 100
    time_offset = "system"
  }
  file_handlers {
    default {
      burst_limit {
        enable = true
        max_count = 10000
        window_time = "1s"
      }
      chars_limit = "unlimited"
      drop_mode_qlen = 3000
      enable = false
      file = "log/emqx.log"
      flush_qlen = 8000
      formatter = "text"
      level = "info"
      max_depth = 100
      max_size = "50MB"
      overload_kill {
        enable = true
        mem_size = "30MB"
        qlen = 20000
        restart_after = "5s"
      }
      rotation {count = 10, enable = true}
      single_line = true
      supervisor_reports = "error"
      sync_mode_qlen = 100
      time_offset = "system"
    }
  }
}
mqtt {
  await_rel_timeout = "300s"
  exclusive_subscription = false
  idle_timeout = "15s"
  ignore_loop_deliver = false
  keepalive_backoff = 0.75
  max_awaiting_rel = 100
  max_clientid_len = 65535
  max_inflight = 32
  max_mqueue_len = 1000
  max_packet_size = "10MB"
  max_qos_allowed = 2
  max_subscriptions = "infinity"
  max_topic_alias = 65535
  max_topic_levels = 128
  mqueue_default_priority = "lowest"
  mqueue_priorities = "disabled"
  "mqueue_store_qos0" = true
  peer_cert_as_clientid = "disabled"
  peer_cert_as_username = "disabled"
  response_information = ""
  retain_available = true
  retry_interval = "30s"
  server_keepalive = "disabled"
  session_expiry_interval = "12h"
  shared_subscription = true
  strict_mode = false
  upgrade_qos = false
  use_username_as_clientid = false
  wildcard_subscription = true
}
retainer {
  backend {
    index_specs = [
      [1, 2, 3],
      [1, 3],
      [2, 3],
      [3]
    ]
    max_retained_messages = 0
    storage_type = "ram"
    type = "built_in_database"
  }
  enable = true
  max_payload_size = "10MB"
  msg_clear_interval = "0s"
  msg_expiry_interval = "0s"
  stop_publish_clear_msg = false
}
rule_engine {
  ignore_sys_message = true
  jq_function_default_timeout = "10s"
  rules {
    "rule_s56b" {
      actions = ["webhook:test"]
      description = ""
      metadata {created_at = 1683882654432}
      sql = "SELECT\n  *\nFROM\n  \"t/#\""
    }
  }
}
sys_topics {
  sys_event_messages {
    client_connected = true
    client_disconnected = true
    client_subscribed = true
    client_unsubscribed = true
  }
  sys_heartbeat_interval = "30s"
  sys_msg_interval = "1m"
}
